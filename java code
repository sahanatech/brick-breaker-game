import javax.swing.*;
import java.awt.*;
import java.awt.event.*;

public class BrickBreakerGame extends JFrame implements ActionListener {
    private final int WIDTH = 800;
    private final int HEIGHT = 600;
    private final int PADDLE_WIDTH = 100;
    private final int PADDLE_HEIGHT = 10;
    private final int BALL_DIAMETER = 20;
    private final int BRICK_WIDTH = 60;
    private final int BRICK_HEIGHT = 20;
    private final int INIT_PADDLE_X = WIDTH / 2 - PADDLE_WIDTH / 2;
    private final int INIT_PADDLE_Y = HEIGHT - 50;
    private final int INIT_BALL_X = WIDTH / 2 - BALL_DIAMETER / 2;
    private final int INIT_BALL_Y = HEIGHT / 2 - BALL_DIAMETER / 2;
    private final int PADDLE_SPEED = 10;
    private final int BALL_SPEED = 5;
    private final int ROWS = 5;
    private final int COLS = 10;

    private Timer timer;
    private int paddleX, paddleY;
    private int ballX, ballY;
    private int ballDX, ballDY;
    private boolean gameOver;
    private boolean[][] bricks;

    public BrickBreakerGame() {
        setTitle("Brick Breaker Game");
        setSize(WIDTH, HEIGHT);
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        setResizable(false);

        paddleX = INIT_PADDLE_X;
        paddleY = INIT_PADDLE_Y;
        ballX = INIT_BALL_X;
        ballY = INIT_BALL_Y;
        ballDX = BALL_SPEED;
        ballDY = BALL_SPEED;
        gameOver = false;
        bricks = new boolean[ROWS][COLS];
        initializeBricks();

        timer = new Timer(10, this);
        timer.start();

        addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent e) {
                int key = e.getKeyCode();
                if (key == KeyEvent.VK_LEFT && paddleX > 0) {
                    paddleX -= PADDLE_SPEED;
                }
                if (key == KeyEvent.VK_RIGHT && paddleX < WIDTH - PADDLE_WIDTH) {
                    paddleX += PADDLE_SPEED;
                }
            }
        });

        setFocusable(true);
    }

    private void initializeBricks() {
        for (int i = 0; i < ROWS; i++) {
            for (int j = 0; j < COLS; j++) {
                bricks[i][j] = true;
            }
        }
    }

    @Override
    public void paint(Graphics g) {
        super.paint(g);

        // Draw paddle
        g.setColor(Color.BLUE);
        g.fillRect(paddleX, paddleY, PADDLE_WIDTH, PADDLE_HEIGHT);

        // Draw ball
        g.setColor(Color.RED);
        g.fillOval(ballX, ballY, BALL_DIAMETER, BALL_DIAMETER);

        // Draw bricks
        int brickWidthWithGap = BRICK_WIDTH + 2;
        int brickHeightWithGap = BRICK_HEIGHT + 2;
        for (int i = 0; i < ROWS; i++) {
            for (int j = 0; j < COLS; j++) {
                if (bricks[i][j]) {
                    g.setColor(Color.GREEN);
                    g.fillRect(j * brickWidthWithGap + 20, i * brickHeightWithGap + 30, BRICK_WIDTH, BRICK_HEIGHT);
                    g.setColor(Color.BLACK);
                    g.drawRect(j * brickWidthWithGap + 20, i * brickHeightWithGap + 30, BRICK_WIDTH, BRICK_HEIGHT);
                }
            }
        }

        // Check for game over
        if (gameOver) {
            g.s
